% Формат: продукт(название, способ приготовления, калории, белки, жиры, углеводы) на 100 г.

% Яйцо
продукт(яйцо, сырое, 155, 13, 11, 1.1).
продукт(яйцо, вареное, 160, 12.6, 11.2, 1.1).
продукт(яйцо, жареное, 196, 13, 15, 1.1).

% Курица
продукт(курица, сырое, 110, 21, 3, 0).
продукт(курица, вареное, 120, 22, 4, 0).
продукт(курица, жареное, 175, 20, 8, 0).
продукт(курица, на_пару, 150, 21, 5, 0).

% Картофель
продукт(картофель, сырой, 77, 2, 0.1, 17).
продукт(картофель, вареное, 86, 1.7, 0.1, 20).
продукт(картофель, жареное, 150, 2, 10, 25).
продукт(картофель, на_пару, 93, 2.5, 0.1, 21).

% Рис
продукт(рис, сырой, 360, 7.5, 0.6, 78).
продукт(рис, вареное, 130, 2.7, 0.3, 28).
продукт(рис, жареное, 200, 4, 6, 35).

% Сыр
продукт(сыр, сырой, 402, 25, 33, 1.3).
продукт(сыр, жареное, 450, 25, 37, 2.5).




найти_низкокалорийные(Продукты) :-
    findall(Название, (продукт(Название, _, Калории, _, _, _), Калории < 100), Продукты).

найти_высокобелковые_веганские(Продукты) :-
    findall(Название, (продукт(Название, _, _, Белки, _, _), 
                       (Название = картофель ; Название = рис), 
                       Белки > 2), Продукты).

найти_жирные_низкоуглеводные(Продукты) :-
    findall(Название, (продукт(Название, _, _, _, Жиры, Углеводы), Жиры > 5, Углеводы < 10), Продукты).


% Нахождение наибольшего из двух чисел 
% без отсечений:
max2(A, B, R) :- (A >= B -> R = A ; R = B).
% с отсечениями
max2_otsek(A, B, A) :- A >= B, !.
max2_otsek(_, B, B).

% Нахождение наибольшего из трёх чисел
% Без отсечений:
max3(A, B, C, R) :- 
    (A >= B, A >= C -> R = A;
        B >= C -> R = B;
        R = C).

% С отсечениями:
max3_otsek(A, B, C, R) :- 
    A >= B, A >= C, !, R = A.
max3_otsek(_, B, C, R) :-
    B >= C, !, R = B.
max3_otsek(_, _, C, R) :-
    R = C.

% Нахождение наибольшего элемента в списке из целых чисел
% Самописное правило:
макс_список([X], X).
макс_список([H|T], Max) :-
    макс_список(T, Tmp),
    (H > Tmp -> Max = H ; Max = Tmp).

% Стандартное правило (max_list/2)
макс_список_стандартный(Список, Max) :- max_list(Список, Max).

% Нахождение наибольшего элемента в списке из термов
% Самописное правило:
макс_термы([Терм], Терм).
макс_термы([H|T], Max) :-
    макс_термы(T, Tmp),
    (H @> Tmp -> Max = H ; Max = Tmp).

% Стандартное правило (max_list/2)
макс_термы_стандартный(Термы, Max) :- max_list(Термы, Max).

% Нахождение наибольшего элемента в списке из списков целых чисел
% Самописное правило:
макс_списков([Список], Макс) :- макс_список(Список, Макс).
макс_списков([Список|Остальные], Макс) :-
    макс_список(Список, Макс1),
    макс_списков(Остальные, Макс2),
    (Макс1 > Макс2 -> Макс = Макс1 ; Макс = Макс2).

% Стандартное правило
макс_списков_стандартный(Списки, Макс) :-
    findall(МаксВнутри, (member(Список, Списки), max_list(Список, МаксВнутри)), ВсеМаксимумы),
    max_list(ВсеМаксимумы, Макс).

% Нахождение наибольшего элемента в списке из списков термов
% Самописное правило
макс_списков_термы([Список], Макс) :- макс_термы(Список, Макс).
макс_списков_термы([Список|Остальные], Макс) :-
    макс_термы(Список, Макс1),
    макс_списков_термы(Остальные, Макс2),
    (Макс1 @> Макс2 -> Макс = Макс1 ; Макс = Макс2).

% Стандартное правило
макс_списков_термы_стандартный(Списки, Макс) :-
    findall(МаксВнутри, (member(Список, Списки), max_list(Список, МаксВнутри)), ВсеМаксимумы),
    max_list(ВсеМаксимумы, Макс).

% Нахождение среднего арифметического в списке из целых чисел
среднее_арифметическое(Список, Среднее) :-
    sum_list(Список, Сумма),
    length(Список, Длина),
    Длина > 0, % защита от деления на 0
    Среднее is Сумма / Длина.

% Нахождение общих элементов в двух списках
% Самописное правило
общие_элементы([], _, []).
общие_элементы([H|T], Список2, [H|Общие]) :-
    member(H, Список2),
    общие_элементы(T, Список2, Общие).
общие_элементы([_|T], Список2, Общие) :-
    общие_элементы(T, Список2, Общие).


% Стандартное правило
общие_элементы_стандартный(Список1, Список2, Общие) :-
    intersection(Список1, Список2, Общие).
